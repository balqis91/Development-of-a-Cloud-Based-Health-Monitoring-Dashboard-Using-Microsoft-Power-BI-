# 1. create a Vpc
resource "aws_vpc" "lungcancer-dashboard-vpc" {
    cidr_block       = "10.0.0.0/16"

    enable_dns_hostnames = true
    enable_dns_support   = true
    tags = {
        Name = "dashboard-production"
    }
}

# 2. create Internet Gateway
resource "aws_internet_gateway" "aws-igw" {
    vpc_id = aws_vpc.dashboard-vpc.vpc_id

}

# 3. create a custom Route Table
resource "aws_route_table" "lungdashboard-route-table" {
    vpc_id = aws_vpc.dashboard-vpc.vpc_id

    route {
        cidr_block = "0.0.0.0/0"
        gateway_id = aws_internet_gateway.aws-igw.id
    }
    tags = {
        Name = "dashboard-prod"
    }
}
# 4. create a subnet for the ec2
resource "aws_subnet" "dashboard-subnet-1" {
    vpc_id   = aws_vpc.dasboard-vpc.id
    cidr_block = "10.0.1.0/24"
      availability_zone = "us-east-1a"
    tags = {
        Name = "dashboard-prod-subnet"
    }
}

# 5. create subnets for the RDS
resource "aws_subnet" "cloud-rds-1" {
  vpc_id     = aws_vpc.dashboard-vpc.id
  cidr_block = "10.0.4.0/24"
    availability_zone = "us-east-1a"
tags = {
  Name = "cloud-rds-1"
  }
}
resource "aws_subnet" "cloud-rds-2" {
    vpc_id    = aws_vpc.dashboard-vpc.id
    cidr_block = "10.0.5.0/24"
    availability_zone = "us-east-1b"
 tags = {
    Name = "cloud-rds-2"
 }
}

resource "aws_subnet" "cloud-rds-3" {
    vpc_id    = aws_vpc.dashboard-vpc.id
    cidr_block = "10.0.6.0/24"
    availability_zone = "us-east-ib"
    tags = {
        Name = "cloud-rds-3"
    }
}

# 6. create  subnet group for the RDS
resource "aws_db_subnet_group" "awsrds" {
    name = "cloud-rds"
    subnet_ids = [aws_subnet.cloud-rds-1.id, aws_subnet.cloud-rds-3.id]
    tags = {
        Name = "resources-rds"
    }
}

# 7. associate the ec2 subnet with the route table
resource "aws_route_table_associate" "b-route" {
    subnet_id = aws_subnet.subnet-1.id
    route_table_id = aws_route_table.dashboard-route-table.id
}

# 8. create secucurity group to allow port 22, 80, 443, 3389, 1433, and icmp
resource "aws_security_group" "permit_web" {
    name = "permit_web_traffic"
    description = "Permit web inbound traffic"
    vpc_id = aws_vpc.dashboard-vpc.id  # Assuming this is the correct reference

    ingress {
        cidr_blocks = ["0.0.0.0/0"]
        description = "HTTPS"
        from_port = 443
        protocol = "tcp"
        to_port = 443
    }
    ingress {
        cidr_blocks = ["0.0.0.0/0"]
        description = "HTTP"
        from_port = 80
        protocol = "tcp"
        to_port = 80
    }
    ingress {
        cidr_blocks = ["0.0.0.0/0"]
        description = "SSH"
        from_port = 22
        protocol = "tcp"
        to_port = 22
    }
    ingress {
        cidr_blocks = ["0.0.0.0/0"]
        description = "RDP"  # Corrected description
        from_port = 3389
        protocol = "tcp"
        to_port = 3389
    }
    ingress {
        cidr_blocks = ["0.0.0.0/0"]
        description = "Permit all incoming ICMP - IPv4 traffic"
        from_port = -1
        to_port = -1
        protocol = "icmp"  # Corrected to specify ICMP protocol
    }
    egress {
        from_port = 0
        to_port = 0
        protocol = "-1"  # Allowing all outbound traffic
        cidr_blocks = ["0.0.0.0/0"]
    }
    tags = {
        Name = "permit_web"
    }
}


# 9. create a network interface with an IP in the subnet that was created in step 4
resource "aws_network_interface" "web-server-ni" {
    subnet_id = aws_subnet.subnet-1.id
    private_ips = ["10.0.1.50"]
    security_groups = [aws_security_group.permit_web.id]  # Updated to the latest security group name
}

# 10. assign an elastic IP to the network interface created in step 7
resource "aws_eip" "one" {
    vpc = true
    network_interface = aws_network_interface.web-server-ni.id
    associate_with_private_ip = "10.0.1.50"
    depends_on = [aws_internet_gateway.aws-igw, aws_instance.dashboard-server]
}


# 11. create an s3 bucket
resource "aws_s3_bucket" "LungCancer-bucket" {
    bucket = "LungCancerBucket"
    tags = {
        Name = "LungCancerDiseaseBucket"   
    }
}

# Upload an object
resource "aws_s3_object" "object" {
    bucket = aws_s3_bucket. Lung_Cancer-bucket.id
    key = "Lung Cancer"
    source = "C:/Users/User/OneDrive - Staffordshire University/Lung_Cancer"
    etag = filemd5 ("C:/Users/User/OneDrive - Staffordshire University/Lung_Cancer")
}

# 12. create a role for the EC2
resource "aws_iam_role" "ec2s3access_role" {
    name = "ec2_iam_role"
    assume_role_policy = jsonencode({
        Version = "2012-10-17"
        Statement = [
            {
            Action = "sts:AssumeRole"
            Effect = "Allow"
            Sid = ""
            Principal = {
                Service = "ec2.amazonaws.com"
            }
    },
        ]
    })
}

# 13. attach existing policy of full access to s3 bucket to the role created

resource "aws_iam_role_policy_attachment" "AmazonS3FullAccess" {
    role = aws_iam_role.ec2s3access_role.name
    policy_arn = "arn:aws:iam::aws:policy/AmazonS3FullAccess"
}

# 14. create an instance profile with the such that any service can take up
resource "aws_iam_instance_profile" "ec2_profile" {
    name = "ec2-profile"
    role = aws_iam_role.ec2s3access_role.name
}

# 15. create EC2 windows server and install Power BI, SSMS, AWS CLI and download file from S3 bucket
resource "aws_instance" "clouddashboard-server" {
  ami = "ami-0bde1eb2c18cb2abe"
  instance_type = "t2.medium"
  availability_zone = "us-east-1a"
  key_name = "main-key"
  iam_instance_profile = aws_iam_instance_profile.ec2_profile.id
  network_interface {
    device_index = 0
    network_interface_id = aws_network_interface.web-server-ni.id
  }
  user_data = <<-EOF
        <powershell>
        invoke-WebRequest-Uri "https://awscli.amazonaws.com/AWSCLIV2.msi"- Outfile C:\AWSCLIV2.msi
        $arguments = "/i`"C:\AWSCLIV2.msi`"/quiet"
        start-Process msiexec.exe -ArgumentList $arguments -Wait
        $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine")
        aws s3 cp 's3://stroke-bucket/Lung Cancer.csv'
'C:\Users\Administration\Downloads\Lung Cancer.csv'
    Invoke-Webrequest -Uri 'https://download.microsoft.com/download/8/8/0/880BCA75-79DD-466A-927D-1ABF5454B0/PBIDesktopSetup_x64.exe' -Outfile 'C:\PBIDesktopSetup_x64.exe'
    Start-Process -FilePath 'C:\PBIDesktopSetup_x64.exe''-silent','-norestart','ACCEPT_EULA=1'
    Invoke-Webrequest -Uri 'https://aka.ms/ssmsfullsetup' -Outfile 'C:\SSMS-Setup-ENU.exe'
    Start-Process -FilePath "C:\SSMS-Setup-ENU.exe" -ArgumentList "/Install/Quiet"
    </powershell>
    EOF
tags = {
    Name = "Dashboard-web-server"
}
}

# 16. create a role for the RDS
resource "aws_iam_role" "rdsdata_role" {
    name = "rds_role"
    assume_role_policy = jsonencode({
        version = "2012-10-17"
        statement = [
            {
                Action = "sts:AssumeRole"
                Effect = "Allow"
                sid =""
                principal = {
                    service = "rds.amazon aws.com"
                }
            },
        ]
    })
}

# 17. to attach an existing policy of full access to s3 bucket to the role created 
resource "aws_iam_role_policy_attachment" "AmazonS3FullAccess2" {
    role     = aws_iam_role.rds_role.name
    policy_arn = "arn:aws:iam::aws:policy/AmazonS3FullAccess"
}

# 18. create an instance profile with the role such that the RDS service can take up 
resource "aws_iam_instance_profile" "rds_profile" {
    name = "rds-profile"
    role = aws_iam_role.rds_role.name
}

# 19. RDS SQL server Instance
resource "aws_db_instance" "HealthMonitoring" {
    allocated_storage        = 20
    engine                   = "sqlserver-ex"
    engine-version           = "14.00.3451.2.v1"
    Instance_class           =  "db.t2.micro"
    identifier               = "LungCancer_Data"
    username                 = "admin"
    password                 = "Ajoke91!"
    publicly_accessible      = true
    skip_final_snapshot      = true
    db-subnet_group_ids      = [aws_security_group.allow_web.id]
}

resource "aws_db_instance_role_association" "example" {
    db_instance_identifier = aws_db_instance.HealthMonitoring.id
    feature_name           = "S3_INTEGRATION"
    role_arn               = aws_iam_role.rds_role.arn
}



